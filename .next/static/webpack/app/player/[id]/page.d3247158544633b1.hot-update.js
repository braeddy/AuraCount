"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/player/[id]/page",{

/***/ "(app-pages-browser)/./src/services/database.ts":
/*!**********************************!*\
  !*** ./src/services/database.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: function() { return /* binding */ DatabaseService; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ DatabaseService auto */ const STORAGE_KEY = \"auracount-game-state\";\nconst BACKUP_KEY = \"auracount-backup\";\nclass DatabaseService {\n    static getInstance() {\n        if (!DatabaseService.instance) {\n            DatabaseService.instance = new DatabaseService();\n        }\n        return DatabaseService.instance;\n    }\n    // Carica i dati dal localStorage\n    loadFromStorage() {\n        if (false) {}\n        try {\n            const saved = localStorage.getItem(STORAGE_KEY);\n            if (saved) {\n                const parsedState = JSON.parse(saved);\n                // Converti le date da stringhe\n                parsedState.players = parsedState.players.map((p)=>({\n                        ...p,\n                        createdAt: new Date(p.createdAt)\n                    }));\n                parsedState.actions = parsedState.actions.map((a)=>({\n                        ...a,\n                        timestamp: new Date(a.timestamp)\n                    }));\n                this.gameState = parsedState;\n            }\n        } catch (error) {\n            console.error(\"Errore nel caricamento dei dati:\", error);\n            this.loadBackup();\n        }\n    }\n    // Salva i dati nel localStorage\n    saveToStorage() {\n        if (false) {}\n        try {\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(this.gameState));\n            // Crea un backup\n            localStorage.setItem(BACKUP_KEY, JSON.stringify(this.gameState));\n        } catch (error) {\n            console.error(\"Errore nel salvataggio dei dati:\", error);\n        }\n    }\n    // Carica il backup\n    loadBackup() {\n        try {\n            const backup = localStorage.getItem(BACKUP_KEY);\n            if (backup) {\n                this.gameState = JSON.parse(backup);\n            }\n        } catch (error) {\n            console.error(\"Errore nel caricamento del backup:\", error);\n        }\n    }\n    // Carica dati da un GameState esterno (per le sessioni)\n    loadFromGameState(gameState) {\n        this.gameState = {\n            players: gameState.players.map((p)=>({\n                    ...p,\n                    createdAt: new Date(p.createdAt)\n                })),\n            actions: gameState.actions.map((a)=>({\n                    ...a,\n                    timestamp: new Date(a.timestamp)\n                }))\n        };\n    }\n    // Ottieni tutti i giocatori\n    getPlayers() {\n        return this.gameState.players;\n    }\n    // Ottieni giocatori ordinati per aura\n    getSortedPlayers() {\n        return [\n            ...this.gameState.players\n        ].sort((a, b)=>b.aura - a.aura);\n    }\n    // Ottieni un giocatore specifico\n    getPlayer(id) {\n        return this.gameState.players.find((p)=>p.id === id);\n    }\n    // Aggiungi un nuovo giocatore\n    addPlayer(name) {\n        const newPlayer = {\n            id: Date.now().toString(),\n            name: name.trim(),\n            aura: 0,\n            createdAt: new Date(),\n            bio: \"\"\n        };\n        this.gameState.players.push(newPlayer);\n        this.saveToStorage();\n        return newPlayer;\n    }\n    // Aggiorna un giocatore\n    updatePlayer(id, updates) {\n        const playerIndex = this.gameState.players.findIndex((p)=>p.id === id);\n        if (playerIndex === -1) return null;\n        this.gameState.players[playerIndex] = {\n            ...this.gameState.players[playerIndex],\n            ...updates\n        };\n        this.saveToStorage();\n        return this.gameState.players[playerIndex];\n    }\n    // Rimuovi un giocatore\n    removePlayer(id) {\n        const initialLength = this.gameState.players.length;\n        this.gameState.players = this.gameState.players.filter((p)=>p.id !== id);\n        this.gameState.actions = this.gameState.actions.filter((a)=>a.playerId !== id);\n        if (this.gameState.players.length < initialLength) {\n            this.saveToStorage();\n            return true;\n        }\n        return false;\n    }\n    // Cambia aura di un giocatore\n    changeAura(playerId, change, reason) {\n        const player = this.getPlayer(playerId);\n        if (!player) return false;\n        // Aggiorna l'aura del giocatore\n        this.updatePlayer(playerId, {\n            aura: player.aura + change\n        });\n        // Aggiungi l'azione allo storico\n        const action = {\n            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n            playerId,\n            playerName: player.name,\n            change,\n            timestamp: new Date(),\n            reason\n        };\n        this.gameState.actions.unshift(action);\n        // Mantieni solo le ultime 1000 azioni\n        this.gameState.actions = this.gameState.actions.slice(0, 1000);\n        this.saveToStorage();\n        return true;\n    }\n    // Ottieni tutte le azioni\n    getActions() {\n        return this.gameState.actions;\n    }\n    // Ottieni azioni di un giocatore specifico\n    getPlayerActions(playerId) {\n        return this.gameState.actions.filter((a)=>a.playerId === playerId);\n    }\n    // Reset del gioco\n    resetGame() {\n        this.gameState = {\n            players: [],\n            actions: []\n        };\n        this.saveToStorage();\n    }\n    // Esporta i dati\n    exportData() {\n        return JSON.stringify(this.gameState, null, 2);\n    }\n    // Importa i dati\n    importData(data) {\n        try {\n            const imported = JSON.parse(data);\n            if (imported.players && imported.actions) {\n                this.gameState = imported;\n                this.saveToStorage();\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Errore nell'importazione:\", error);\n            return false;\n        }\n    }\n    constructor(){\n        this.gameState = {\n            players: [],\n            actions: []\n        };\n        this.loadFromStorage();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/database.ts\n"));

/***/ })

});